// AISDproj1.cpp : Ten plik zawiera funkcjÄ âmainâ. W nim rozpoczyna siÄ i koÅczy wykonywanie programu.
//
#include <stdio.h>
#include <iostream>
#define MAXCHARSIZE 10

#define ADDING 1
#define MULTIPLYING 2
#define IFSTATEMENT 3
#define NEGATION 4
#define MAXING 5
#define MININING 5
#define PARENTHESIS 6

#define IFFFFF 6
#define PARENTHESIS_START 5
#define PARENTHESIS_END 4
#define SYMBOL 3
#define NUMBER 2
#define COMMA 1
#define EQUASION_END 0


using namespace std;

//---------------------------------------- NODE -------------------------------------------------------------------
union Data
{
    int number;
    char symbol[MAXCHARSIZE];
};

typedef struct NODE
{
    Data data;
    bool isNumber;
    NODE* next;

};

NODE* newStringNode(const char* str)
{
    NODE* node = new NODE;
    node->isNumber = false;
    node->next = nullptr;
    int i = 0;
    for (i = 0; str[i] != '\0'; ++i)
    {
        node->data.symbol[i] = str[i];
    }
    node->data.symbol[i] = '\0';
    return node;

}

NODE* newIntNode(const int val)
{
    NODE* node = new NODE;
    node->isNumber = true;
    node->next = nullptr;
    node->data.number = val;
    return node;
}

void addNumToStr(NODE* node, int toAdd)
{
    char added[MAXCHARSIZE];
    snprintf(added, MAXCHARSIZE, "%d", toAdd);
    strcat_s(node->data.symbol, added);
}

//-------------------------------------------- STACK -------------------------------------------------------------

typedef struct Stack
{
    NODE* top;

    Stack() : top(nullptr) {}
};

bool StackEmpty(const Stack& stack)
{
    return (stack.top == nullptr);
}

void push(Stack& stack, NODE* added)
{
    added->next = stack.top;
    stack.top = added;
}

NODE* pop(Stack& stack)
{
    if (StackEmpty(stack))
    {
        return NULL;
    }
    NODE* popped = stack.top;
    stack.top = stack.top->next;
    //delete popped;
    return popped;
}

NODE* peek(Stack& stack)
{
    if (StackEmpty(stack))
    {
        return NULL;
    }
    return stack.top;
}

void printStack(Stack stack)
{
    NODE* current = stack.top;
    while (current != nullptr)
    {
        if (current->isNumber)          // jeÅli dane sÄ numerami wypisz liczby
        {
            //cout << current->data.number << " ";
            printf("%d ", current->data.number);
        }
        else        // W przeciwnym razie wypisz symbole
        {
            //cout << current->data.symbol << " ";
            printf("%s ", current->data.symbol);
        }
        current = current->next;
    }
    printf(" \n");
}

Stack stackFlip(Stack& stack)
{
    Stack flippedstack;
    NODE* toflip;
    while (stack.top != nullptr)
    {
        toflip = pop(stack);
        push(flippedstack, toflip);
    }
    return flippedstack;
}

void destroyStack(Stack& stack) {
    while (stack.top != nullptr) {
        NODE* temp = stack.top;
        stack.top = stack.top->next;
        delete temp;
    }
}

//------------------------------ PARSING FUNCTIONS -------------------------------------------------------------

int parseInput(Stack& mainstack, Stack& parser, char input[]);

void EquasionInput(Stack& stack, Stack& parser, int* count);


int SymbolToValue(char symbol)  //funkcja nadajÄca wartosc symbolom, potrzebna do porÃłwnywania kolejnosci dziaÅan 
{
    if (symbol == '+' || symbol == '-')
        return ADDING;
    else if (symbol == '/' || symbol == '*')
        return MULTIPLYING;
    else if (symbol == 'N')
        return NEGATION;
    else if (symbol == 'M')
        return MAXING;
    else if (symbol == 'I')
        return IFSTATEMENT;
    else if (symbol == ',')
        return COMMA;
    else if (symbol == ')' || symbol == '(')
        return PARENTHESIS;
    else
        return 0;

}

int Input(char input[], int& num)
{
    cin >> input;
    if (input[0] == '.')
    {
        return EQUASION_END;
    }
    else if (input[0] == ',')
    {
        return COMMA;
    }
    else if (input[0] == ')')
    {
        return PARENTHESIS_END;
    }
    else if (input[0] == '(')
    {
        return PARENTHESIS_START;
    }
    else if (input[0] == 'I')
    {
        return IFFFFF;
    }
    else if (sscanf_s(input, "%d", &num) == 1)
    {
        return NUMBER;
    }
    else
        return SYMBOL;
}

void freeParser(Stack& mainstack, Stack& parser, char symbol)        //oczyszczanie parsera 
{
    NODE* current;
    char currentSymbol;
    while (!StackEmpty(parser))
    {
        currentSymbol = peek(parser)->data.symbol[0];
        if (SymbolToValue(currentSymbol) == PARENTHESIS || (SymbolToValue(currentSymbol) == NEGATION && SymbolToValue(symbol) == NEGATION))
        {
            break;
        }
        if (SymbolToValue(currentSymbol) >= SymbolToValue(symbol) || symbol == ' ' || symbol == ')')
        {
            push(mainstack, pop(parser));
        }
        else
            break;
    }
}

void MinMaxFunction(Stack& mainstack, Stack& parser, NODE* maxORmin)
{
    int count = 1, num, openParenth = 0, closePareth = 0;
    char input[MAXCHARSIZE] = { ' ' };
    bool EquasionLoading = true;

    while (EquasionLoading)
    {
        int inputType = Input(input, num);
        NODE* newN;

        switch (inputType)
        {
        case COMMA:
            freeParser(mainstack, parser, ',');
            count += 1;
            break;

        case PARENTHESIS_END:
            closePareth += 1;
            freeParser(mainstack, parser, ')');
            pop(parser);
            break;

        case PARENTHESIS_START:
            openParenth += 1;
            push(parser, newStringNode(")"));
            break;

        case NUMBER:
            push(mainstack, newIntNode(num));
            break;
        
        case IFFFFF:
            count -= 2;
            push(parser, newStringNode(input));
            break;

        case SYMBOL:
            parseInput(mainstack, parser, input);
            break;
        }
        if (openParenth == closePareth)
        {
            EquasionLoading = false;
        }
    }
    addNumToStr(maxORmin, count);
    push(mainstack, maxORmin);
}

int parseInput(Stack& mainstack, Stack& parser, char input[])
{
    NODE* newN = newStringNode(input);
    if (input[0] == 'M')
    {
        MinMaxFunction(mainstack, parser, newN);
        return 0;
    }
    else
    {
        if (input[0] != '(')
        {
            freeParser(mainstack, parser, input[0]);
        }
        newN = newStringNode(input);
        push(parser, newN);
    }
    return 1;
}

void EquasionInput(Stack& stack, Stack& parser, int *count)
{
    char input[MAXCHARSIZE] = { ' ' };
    int num, newCount;
    bool EquasionLoading = true;
    while (EquasionLoading)
    {
        int inputType = Input(input, num);
        NODE* newN;

        switch (inputType)
        {
        case EQUASION_END:
            EquasionLoading = false;
            break;

        case COMMA:
            freeParser(stack, parser, ',');
            break;

        case PARENTHESIS_END:
            freeParser(stack, parser, ')');
            //pop(parser);
            if (peek(parser)->data.symbol[0] == 'I')
            {
                push(stack, pop(parser));
            }
            return;

        case PARENTHESIS_START:
            newN = newStringNode(input);
            push(parser, newN);
            EquasionInput(stack, parser, &newCount);
            pop(parser);
            break;

        case IFFFFF:
            newN = newStringNode(input);
            push(parser, newN);
            break;

        case NUMBER:
            newN = newIntNode(num);
            push(stack, newN);
            break;

        case SYMBOL:
            parseInput(stack, parser, input);
        }
        *count += 1;
    }
}

//----------------------------- SOLVING FUNCTIONS ----------------------------------------------------------------

void addingSolver(Stack& solver, char symbol)
{
    int result = 0;

    if (symbol == '-')
    {
        result -= pop(solver)->data.number;
    }
    else
    {
        result += pop(solver)->data.number;
    }
    result += pop(solver)->data.number;  

    NODE* resultNode = newIntNode(result);
    push(solver, resultNode);
}

bool multiplyingSolver(Stack& solver, char symbol)
{
    int factor, result;
    factor = pop(solver)->data.number;
    result = pop(solver)->data.number;
    

    if (symbol == '/') 
    {
        if (factor == 0)
        {
            cout << "ERROR" << endl;
            return false;
        }
        else
        result /= factor;
    }
        
    else
        result *= factor;

    NODE* resultNode = newIntNode(result);
    push(solver, resultNode);
    return true;
}

void maxingSolver(Stack& solver, char symbol, int num)
{
    NODE* resultNode;
    int mini = INT_MAX, maxi = 0, a;
    for (int i = 0; i < num; i++)
    {
        a = pop(solver)->data.number;
        if (a < mini)
            mini = a;
        if (a > maxi)
            maxi = a;
    }
    if (symbol == 'A')
        resultNode = newIntNode(maxi);
    else
        resultNode = newIntNode(mini);

    push(solver, resultNode);
}

void ifSolver(Stack& solver)
{
    NODE* resultNode, *aa;
    int a, b, c;

    c = pop(solver)->data.number;
    b = pop(solver)->data.number;
    aa = pop(solver);                       // tak zrobic w raszcie rzeczy
    a = aa->data.number;
    delete aa;

    if (a > 0)
        resultNode = newIntNode(b);
    else
        resultNode = newIntNode(c);
    push(solver, resultNode);
}

bool solverCoordinator(NODE* node, Stack& solver)
{
    if (!node->isNumber)
    {
        cout << node->data.symbol << " ";
        printStack(solver);
        int num;
        char str = node->data.symbol[3];
        switch (SymbolToValue(*node->data.symbol))
        {
        case ADDING:
            addingSolver(solver, node->data.symbol[0]);
            break;

        case MULTIPLYING:
            if (!multiplyingSolver(solver, node->data.symbol[0]))
                return false;
            break;

        case NEGATION:
            solver.top->data.number *= -1;
            break;

        case MAXING:
            sscanf_s(&str, "%d", &num);
            maxingSolver(solver, node->data.symbol[1], num);
            break;

        case IFSTATEMENT:
            ifSolver(solver);
            break;
        }
    }
    else
        push(solver, node);
    return true;
}

int main()
{
    int Equasions;
    cin >> Equasions;

    for (int i = 0; i < Equasions; i++)
    {
        Stack stack, parser, equasion, solver;
        bool succed=false;
        NODE* node;
        int count;

        EquasionInput(stack, parser, &count);
        freeParser(stack, parser, ' ');
        printf(" \n");

        equasion = stackFlip(stack);
        printStack(equasion);

        while (!StackEmpty(equasion))
        {
            node = pop(equasion);
            succed = solverCoordinator(node, solver);
            if (succed)
                continue;
            else
                break;
        }
        if(succed)
            printStack(solver);

        destroyStack(stack);
        destroyStack(parser);
        destroyStack(equasion);
        destroyStack(solver);
    }

    return 0;
}
