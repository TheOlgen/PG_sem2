Calculator (A&DS)
Last update: 2024-03-07 (2nd additional remark)

Write an integer calculator. Use the postfix notation to handle precedence of operators, functions and parentheses.

Input:
n -number of formulas
n formulas, each in the form given below.
Each formula is a valid expression in an infix notation with functions and ends with a dot ('.'). Each token is separated by some whitespace characters. Each operand is a positive integer (although the result of an operation might be negative). Each operator is a single character and every function name consists only of capital letters.
The following operations are available, in the ascending order of priority:

a + b, a - b ;
a * b, a / b -all operations are made on integers, hence the results of division are rounded down (standard C '/' operator). You cannot divide by 0 (see the Output section);
IF(a, b, c) -if a>0 return b, otherwise c,
N a -unary negation, i.e. -a,
MIN( a1, a2, ... ), MAX(a1, a2, ...) -functions MIN and MAX do not have a restriction on the number of parameters;
( ... ) -parentheses.

Output for each formula:
the formula in the postfix notation;
before executing each operation print the operator or function and the content of the stack;

the final result;
if you encounter a division by 0, print "ERROR" and move to the next expression.

Additional remarks and hints:
Each instance of MINi and MAXi function has a specified number of arguments, i, in the postfix notation (see the example output)
Do not store the given expressions (i.e. in the infix notation), only the latest token should be sufficient. Consequently, you should count the arguments of MIN and MAX during the conversion. Additional instances of data structures might be required.
You may assume that all values will be withing range of int. Note that each token is separate.
Using the type string and data structures from libraries is forbidden.
For the full amount of points, a stack based on a list is required. In the case of a stack implemented using an array, the amount of points is scaled by 0.75.
This does not mean that stacks are the only permitted data structures. You can use additonal data structures to solve encountered difficulties beyond the basic algorithms from the lecture.
Remember to clean up any unused memory. Memory leaks will be penalized.
Examples can be found below the Polish version of the instruction.


Polska wersja

Napisz kalkulator liczb całkowitych. Użyj notacji postfiksowej do obsługi kolejności wykonywania operacji, funkcji i nawiasów.

Wejście:
n -liczba formuł
n formuł, każda w formie podanej poniżej.
Każda formuła jest prawidłowym wyrażeniem w notacji infiksowej z funkcjami i kończy się kropką ('.'). Każdy token jest oddzielony kilkoma białymi znakami. Każdy operand jest dodatnią liczbą całkowitą (chociaż wynik operacji może być ujemny). Każdy operator to pojedynczy znak, a każda nazwa funkcji składa się wyłącznie z wielkich liter.
Dostępne są następujące operacje, w kolejności rosnącego priorytetu:

a + b, a - b;
a * b, a / b -wszystkie operacje wykonywane są na liczbach całkowitych, stąd wynik dzielenia zaokrąglany jest w dół (standardowy operator '/' w C). Nie można dzielić przez 0 (zobacz przykładowe dane wyjściowe);
IF(a, b, c) -jeśli a> 0 zwróć b, w przeciwnym razie c,
N a -jednoargumentowa negacja, czyli -a,
MIN( a1, a2, ... ) , MAX(a1, a2, ...) -funkcje MIN i MAX nie mają ograniczonej liczby parametrów;
( ... ) -nawiasy.

Wyjście dla każdej formuły:
formuła w notacji postfiksowej ;
przed wykonaniem każdej operacji wypisz operator lub funkcję i zawartość stosu;
wynik końcowy;

jeśli napotkasz dzielenie przez 0, wypisz „ERROR” i przejdź do następnego wyrażenia.

Dodatkowe uwagi i wskazówki:
Każde wystąpienie funkcji MINi i MAXi ma określoną liczbę argumentów, i, w notacji postfiksowej (zobacz przykładowe dane wyjściowe)
Nie przechowuj podanych wyrażeń (tj. w notacji infiksowej) w całości, najnowszy token wystarczy. W związku z tym liczenie argumentów MIN i MAX powinno odbywać się podczas konwersji. Aby to zrobić można wykorzystać dodatkowe wystąpienia struktur danych.
Możesz założyć, że wszystkie wartości będą mieścić się w zakresie int. Zwróć uwagę, że każdy token jest oddzielony białymi znakami.
Używanie typu string i struktur danych z bibliotek jest zabronione.
Do uzyskania pełnej liczby punktów wymagany jest samodzielnie zaimplementowany stos oparty na liście. W przypadku stosu zaimplementowanego za pomocą tablicy, ilość punktów skalowana jest przez 0,75.
Nie znaczy to, że muszą Państwo używać tylko stosów. Dodatkowe struktury danych mogą ułatwić rozwiązanie problemów spoza podstawowych algorytmów z wykładu.
Pamiętaj o wyczyszczeniu nieużywanej pamięci. Wycieki pamięci skutkują redukcją punktów.


Example input:
4
MIN ( 100 , MAX ( 1 , 34 , 2 ) , 80 ,  MIN ( 66 , 36  , 35 , 77 ) , 50 , 60 ) .
2 + MIN ( 100 , MAX ( 1 , 6 * 5 + 2 , 2 ) , 80 ,  MIN ( 66 , 36  , 35 , 77 ) , 50 , 60 ) * 3 .
N 400 + ( 11 - ( 3 * 2 ) ) / 2 + N N 200 .
IF ( ( 6 + 8 ) , ( 4 / 2 ) , MIN ( 8 , 2 , 1 , 0 , 3 ) ) * 2 * 6 / N ( 3 ) .

Example output:
100  1  34  2  MAX3  80  66  36  35  77  MIN4  50  60  MIN6
MAX3 2 34 1 100
MIN4 77 35 36 66 80 34 100
MIN6 60 50 35 80 34 100
34

2  100  1  6  5  *  2  +  2  MAX3  80  66  36  35  77  MIN4  50  60  MIN6  3  *  +
* 5 6 1 100 2
+ 2 30 1 100 2
MAX3 2 32 1 100 2
MIN4 77 35 36 66 80 32 100 2
MIN6 60 50 35 80 32 100 2
* 3 32 2
+ 96 2
98

400  N  11  3  2  *  -  2  /  +  200  N  N  +
N 400
* 2 3 11 -400
- 6 11 -400
/ 2 5 -400
+ 2 -400
N 200 -398
N -200 -398
+ 200 -398
-198

6  8  +  4  2  /  8  2  1  0  3  MIN5  IF  2  *  6  *  3  N  /
+ 8 6
/ 2 4 14
MIN5 3 0 1 2 8 2 14
IF 0 2 14
* 2 2
* 6 4
N 3 24
/ -3 24
-8
